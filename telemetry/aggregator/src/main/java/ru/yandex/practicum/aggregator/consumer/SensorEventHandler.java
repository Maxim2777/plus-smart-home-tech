package ru.yandex.practicum.aggregator.consumer;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.clients.consumer.OffsetAndMetadata;
import org.apache.kafka.common.TopicPartition;
import org.springframework.stereotype.Component;
import ru.yandex.practicum.aggregator.producer.SensorsSnapshotProducer;
import ru.yandex.practicum.aggregator.service.AggregationService;
import ru.yandex.practicum.kafka.telemetry.event.SensorEventAvro;

import java.util.HashMap;
import java.util.Map;

@Slf4j
@Component
@RequiredArgsConstructor
public class SensorEventHandler {

    private final AggregationService aggregationService;
    private final SensorsSnapshotProducer producer;
    private final KafkaConsumer<String, SensorEventAvro> consumer;

    private final Map<TopicPartition, OffsetAndMetadata> currentOffsets = new HashMap<>();

    public void handle(ConsumerRecords<String, SensorEventAvro> records) {
        log.info("üîÑ –ü–æ–ª—É—á–µ–Ω –ø–∞–∫–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka: {} –∑–∞–ø–∏—Å–µ–π", records.count());

        for (ConsumerRecord<String, SensorEventAvro> record : records) {
            SensorEventAvro event = record.value();
            String hubId = event.getHubId();
            String sensorId = event.getId();

            log.debug("‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç —Å–µ–Ω—Å–æ—Ä–∞ [{}] —Ö–∞–±–∞ [{}] (offset={})", sensorId, hubId, record.offset());

            aggregationService.aggregateEvent(event)
                    .ifPresentOrElse(
                            snapshot -> {
                                log.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ —Å–Ω–∞–ø—à–æ—Ç–∞ —Ö–∞–±–∞ [{}] –≤ Kafka", snapshot.getHubId());
                                producer.send("telemetry.snapshots.v1", snapshot.getHubId(), snapshot);
                            },
                            () -> log.debug("‚è≠ –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –æ—Ç —Å–µ–Ω—Å–æ—Ä–∞ [{}] —Ö–∞–±–∞ [{}] (–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–æ)", sensorId, hubId)
                    );

            currentOffsets.put(
                    new TopicPartition(record.topic(), record.partition()),
                    new OffsetAndMetadata(record.offset() + 1)
            );
        }

        commitOffsets();
    }

    private void commitOffsets() {
        log.debug("‚úÖ –ö–æ–º–º–∏—Ç —Å–º–µ—â–µ–Ω–∏–π (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ): {}", currentOffsets);
        consumer.commitAsync(currentOffsets, null);
    }

    public void shutdown() {
        log.info("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã SensorEventHandler: –∫–æ–º–º–∏—Ç –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ Kafka consumer");
        consumer.commitSync(currentOffsets);
        consumer.close();
    }
}