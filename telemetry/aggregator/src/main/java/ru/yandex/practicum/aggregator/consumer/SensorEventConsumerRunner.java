package ru.yandex.practicum.aggregator.consumer;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.errors.WakeupException;
import org.springframework.stereotype.Component;
import ru.yandex.practicum.kafka.telemetry.event.SensorEventAvro;

import java.time.Duration;
import java.util.List;

@Slf4j
@Component
@RequiredArgsConstructor
public class SensorEventConsumerRunner {

    private final SensorEventHandler eventHandler;
    private final KafkaConsumer<String, SensorEventAvro> consumer;

    private static final String TOPIC = "telemetry.sensors.v1";
    private static final Duration POLL_TIMEOUT = Duration.ofMillis(1000);

    public void start() {
        log.info("üöÄ –ó–∞–ø—É—Å–∫ SensorEventConsumerRunner, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ [{}]", TOPIC);
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            log.info("üì¥ –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è Kafka.");
            consumer.wakeup();
        }));

        try {
            consumer.subscribe(List.of(TOPIC));
            log.info("üì° –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Ç–æ–ø–∏–∫ Kafka [{}] —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", TOPIC);

            while (true) {
                ConsumerRecords<String, SensorEventAvro> records = consumer.poll(POLL_TIMEOUT);
                if (!records.isEmpty()) {
                    log.debug("üì• –ü–æ–ª—É—á–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ç–æ–ø–∏–∫–∞ [{}]", records.count(), TOPIC);
                }
                eventHandler.handle(records);
            }

        } catch (WakeupException ignored) {
            log.info("‚õî –ü–æ–ª—É—á–µ–Ω WakeupException ‚Äî –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞ —á—Ç–µ–Ω–∏—è.");
        } catch (Exception e) {
            log.error("üî• –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Kafka-—Å–æ–æ–±—â–µ–Ω–∏–π: {}", e.getMessage(), e);
        } finally {
            log.info("üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã SensorEventConsumerRunner, –≤—ã–∑–æ–≤ shutdown()");
            eventHandler.shutdown();
        }
    }
}